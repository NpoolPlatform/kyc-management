// Code generated by entc, DO NOT EDIT.

package kyc

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/kyc-management/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// CardType applies equality check predicate on the "card_type" field. It's identical to CardTypeEQ.
func CardType(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardType), v))
	})
}

// CardID applies equality check predicate on the "card_id" field. It's identical to CardIDEQ.
func CardID(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardID), v))
	})
}

// FrontCardImg applies equality check predicate on the "front_card_img" field. It's identical to FrontCardImgEQ.
func FrontCardImg(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrontCardImg), v))
	})
}

// BackCardImg applies equality check predicate on the "back_card_img" field. It's identical to BackCardImgEQ.
func BackCardImg(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackCardImg), v))
	})
}

// UserHandlingCardImg applies equality check predicate on the "user_handling_card_img" field. It's identical to UserHandlingCardImgEQ.
func UserHandlingCardImg(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserHandlingCardImg), v))
	})
}

// ReviewStatus applies equality check predicate on the "review_status" field. It's identical to ReviewStatusEQ.
func ReviewStatus(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewStatus), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegion), v))
	})
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegion), v...))
	})
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegion), v...))
	})
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegion), v))
	})
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegion), v))
	})
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegion), v))
	})
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegion), v))
	})
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegion), v))
	})
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegion), v))
	})
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegion), v))
	})
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegion), v))
	})
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegion), v))
	})
}

// CardTypeEQ applies the EQ predicate on the "card_type" field.
func CardTypeEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardType), v))
	})
}

// CardTypeNEQ applies the NEQ predicate on the "card_type" field.
func CardTypeNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardType), v))
	})
}

// CardTypeIn applies the In predicate on the "card_type" field.
func CardTypeIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCardType), v...))
	})
}

// CardTypeNotIn applies the NotIn predicate on the "card_type" field.
func CardTypeNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCardType), v...))
	})
}

// CardTypeGT applies the GT predicate on the "card_type" field.
func CardTypeGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCardType), v))
	})
}

// CardTypeGTE applies the GTE predicate on the "card_type" field.
func CardTypeGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCardType), v))
	})
}

// CardTypeLT applies the LT predicate on the "card_type" field.
func CardTypeLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCardType), v))
	})
}

// CardTypeLTE applies the LTE predicate on the "card_type" field.
func CardTypeLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCardType), v))
	})
}

// CardTypeContains applies the Contains predicate on the "card_type" field.
func CardTypeContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCardType), v))
	})
}

// CardTypeHasPrefix applies the HasPrefix predicate on the "card_type" field.
func CardTypeHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCardType), v))
	})
}

// CardTypeHasSuffix applies the HasSuffix predicate on the "card_type" field.
func CardTypeHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCardType), v))
	})
}

// CardTypeEqualFold applies the EqualFold predicate on the "card_type" field.
func CardTypeEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCardType), v))
	})
}

// CardTypeContainsFold applies the ContainsFold predicate on the "card_type" field.
func CardTypeContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCardType), v))
	})
}

// CardIDEQ applies the EQ predicate on the "card_id" field.
func CardIDEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardID), v))
	})
}

// CardIDNEQ applies the NEQ predicate on the "card_id" field.
func CardIDNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardID), v))
	})
}

// CardIDIn applies the In predicate on the "card_id" field.
func CardIDIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCardID), v...))
	})
}

// CardIDNotIn applies the NotIn predicate on the "card_id" field.
func CardIDNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCardID), v...))
	})
}

// CardIDGT applies the GT predicate on the "card_id" field.
func CardIDGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCardID), v))
	})
}

// CardIDGTE applies the GTE predicate on the "card_id" field.
func CardIDGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCardID), v))
	})
}

// CardIDLT applies the LT predicate on the "card_id" field.
func CardIDLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCardID), v))
	})
}

// CardIDLTE applies the LTE predicate on the "card_id" field.
func CardIDLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCardID), v))
	})
}

// CardIDContains applies the Contains predicate on the "card_id" field.
func CardIDContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCardID), v))
	})
}

// CardIDHasPrefix applies the HasPrefix predicate on the "card_id" field.
func CardIDHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCardID), v))
	})
}

// CardIDHasSuffix applies the HasSuffix predicate on the "card_id" field.
func CardIDHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCardID), v))
	})
}

// CardIDEqualFold applies the EqualFold predicate on the "card_id" field.
func CardIDEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCardID), v))
	})
}

// CardIDContainsFold applies the ContainsFold predicate on the "card_id" field.
func CardIDContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCardID), v))
	})
}

// FrontCardImgEQ applies the EQ predicate on the "front_card_img" field.
func FrontCardImgEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgNEQ applies the NEQ predicate on the "front_card_img" field.
func FrontCardImgNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgIn applies the In predicate on the "front_card_img" field.
func FrontCardImgIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFrontCardImg), v...))
	})
}

// FrontCardImgNotIn applies the NotIn predicate on the "front_card_img" field.
func FrontCardImgNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFrontCardImg), v...))
	})
}

// FrontCardImgGT applies the GT predicate on the "front_card_img" field.
func FrontCardImgGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgGTE applies the GTE predicate on the "front_card_img" field.
func FrontCardImgGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgLT applies the LT predicate on the "front_card_img" field.
func FrontCardImgLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgLTE applies the LTE predicate on the "front_card_img" field.
func FrontCardImgLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgContains applies the Contains predicate on the "front_card_img" field.
func FrontCardImgContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgHasPrefix applies the HasPrefix predicate on the "front_card_img" field.
func FrontCardImgHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgHasSuffix applies the HasSuffix predicate on the "front_card_img" field.
func FrontCardImgHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgEqualFold applies the EqualFold predicate on the "front_card_img" field.
func FrontCardImgEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFrontCardImg), v))
	})
}

// FrontCardImgContainsFold applies the ContainsFold predicate on the "front_card_img" field.
func FrontCardImgContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFrontCardImg), v))
	})
}

// BackCardImgEQ applies the EQ predicate on the "back_card_img" field.
func BackCardImgEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgNEQ applies the NEQ predicate on the "back_card_img" field.
func BackCardImgNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgIn applies the In predicate on the "back_card_img" field.
func BackCardImgIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBackCardImg), v...))
	})
}

// BackCardImgNotIn applies the NotIn predicate on the "back_card_img" field.
func BackCardImgNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBackCardImg), v...))
	})
}

// BackCardImgGT applies the GT predicate on the "back_card_img" field.
func BackCardImgGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgGTE applies the GTE predicate on the "back_card_img" field.
func BackCardImgGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgLT applies the LT predicate on the "back_card_img" field.
func BackCardImgLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgLTE applies the LTE predicate on the "back_card_img" field.
func BackCardImgLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgContains applies the Contains predicate on the "back_card_img" field.
func BackCardImgContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgHasPrefix applies the HasPrefix predicate on the "back_card_img" field.
func BackCardImgHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgHasSuffix applies the HasSuffix predicate on the "back_card_img" field.
func BackCardImgHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgEqualFold applies the EqualFold predicate on the "back_card_img" field.
func BackCardImgEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBackCardImg), v))
	})
}

// BackCardImgContainsFold applies the ContainsFold predicate on the "back_card_img" field.
func BackCardImgContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBackCardImg), v))
	})
}

// UserHandlingCardImgEQ applies the EQ predicate on the "user_handling_card_img" field.
func UserHandlingCardImgEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgNEQ applies the NEQ predicate on the "user_handling_card_img" field.
func UserHandlingCardImgNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgIn applies the In predicate on the "user_handling_card_img" field.
func UserHandlingCardImgIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserHandlingCardImg), v...))
	})
}

// UserHandlingCardImgNotIn applies the NotIn predicate on the "user_handling_card_img" field.
func UserHandlingCardImgNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserHandlingCardImg), v...))
	})
}

// UserHandlingCardImgGT applies the GT predicate on the "user_handling_card_img" field.
func UserHandlingCardImgGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgGTE applies the GTE predicate on the "user_handling_card_img" field.
func UserHandlingCardImgGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgLT applies the LT predicate on the "user_handling_card_img" field.
func UserHandlingCardImgLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgLTE applies the LTE predicate on the "user_handling_card_img" field.
func UserHandlingCardImgLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgContains applies the Contains predicate on the "user_handling_card_img" field.
func UserHandlingCardImgContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgHasPrefix applies the HasPrefix predicate on the "user_handling_card_img" field.
func UserHandlingCardImgHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgHasSuffix applies the HasSuffix predicate on the "user_handling_card_img" field.
func UserHandlingCardImgHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgEqualFold applies the EqualFold predicate on the "user_handling_card_img" field.
func UserHandlingCardImgEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserHandlingCardImg), v))
	})
}

// UserHandlingCardImgContainsFold applies the ContainsFold predicate on the "user_handling_card_img" field.
func UserHandlingCardImgContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserHandlingCardImg), v))
	})
}

// ReviewStatusEQ applies the EQ predicate on the "review_status" field.
func ReviewStatusEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusNEQ applies the NEQ predicate on the "review_status" field.
func ReviewStatusNEQ(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusIn applies the In predicate on the "review_status" field.
func ReviewStatusIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReviewStatus), v...))
	})
}

// ReviewStatusNotIn applies the NotIn predicate on the "review_status" field.
func ReviewStatusNotIn(vs ...string) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReviewStatus), v...))
	})
}

// ReviewStatusGT applies the GT predicate on the "review_status" field.
func ReviewStatusGT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusGTE applies the GTE predicate on the "review_status" field.
func ReviewStatusGTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusLT applies the LT predicate on the "review_status" field.
func ReviewStatusLT(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusLTE applies the LTE predicate on the "review_status" field.
func ReviewStatusLTE(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusContains applies the Contains predicate on the "review_status" field.
func ReviewStatusContains(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusHasPrefix applies the HasPrefix predicate on the "review_status" field.
func ReviewStatusHasPrefix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusHasSuffix applies the HasSuffix predicate on the "review_status" field.
func ReviewStatusHasSuffix(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusEqualFold applies the EqualFold predicate on the "review_status" field.
func ReviewStatusEqualFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReviewStatus), v))
	})
}

// ReviewStatusContainsFold applies the ContainsFold predicate on the "review_status" field.
func ReviewStatusContainsFold(v string) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReviewStatus), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.Kyc {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kyc(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Kyc) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Kyc) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Kyc) predicate.Kyc {
	return predicate.Kyc(func(s *sql.Selector) {
		p(s.Not())
	})
}
