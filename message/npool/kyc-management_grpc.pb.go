// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KycManagementClient is the client API for KycManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KycManagementClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	CreateKycRecord(ctx context.Context, in *CreateKycRecordRequest, opts ...grpc.CallOption) (*CreateKycRecordResponse, error)
	GetKycInfo(ctx context.Context, in *GetKycInfoRequest, opts ...grpc.CallOption) (*GetKycInfoResponse, error)
	// update kyc status
	UpdateKycStatus(ctx context.Context, in *UpdateKycStatusRequest, opts ...grpc.CallOption) (*UpdateKycStatusResponse, error)
	UpdateKyc(ctx context.Context, in *UpdateKycRequest, opts ...grpc.CallOption) (*UpdateKycResponse, error)
	UploadKycImg(ctx context.Context, in *UploadKycImgRequest, opts ...grpc.CallOption) (*UploadKycImgResponse, error)
	GetKycImg(ctx context.Context, in *GetKycImgRequest, opts ...grpc.CallOption) (*GetKycImgResponse, error)
}

type kycManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewKycManagementClient(cc grpc.ClientConnInterface) KycManagementClient {
	return &kycManagementClient{cc}
}

func (c *kycManagementClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/kyc.management.v1.KycManagement/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycManagementClient) CreateKycRecord(ctx context.Context, in *CreateKycRecordRequest, opts ...grpc.CallOption) (*CreateKycRecordResponse, error) {
	out := new(CreateKycRecordResponse)
	err := c.cc.Invoke(ctx, "/kyc.management.v1.KycManagement/CreateKycRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycManagementClient) GetKycInfo(ctx context.Context, in *GetKycInfoRequest, opts ...grpc.CallOption) (*GetKycInfoResponse, error) {
	out := new(GetKycInfoResponse)
	err := c.cc.Invoke(ctx, "/kyc.management.v1.KycManagement/GetKycInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycManagementClient) UpdateKycStatus(ctx context.Context, in *UpdateKycStatusRequest, opts ...grpc.CallOption) (*UpdateKycStatusResponse, error) {
	out := new(UpdateKycStatusResponse)
	err := c.cc.Invoke(ctx, "/kyc.management.v1.KycManagement/UpdateKycStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycManagementClient) UpdateKyc(ctx context.Context, in *UpdateKycRequest, opts ...grpc.CallOption) (*UpdateKycResponse, error) {
	out := new(UpdateKycResponse)
	err := c.cc.Invoke(ctx, "/kyc.management.v1.KycManagement/UpdateKyc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycManagementClient) UploadKycImg(ctx context.Context, in *UploadKycImgRequest, opts ...grpc.CallOption) (*UploadKycImgResponse, error) {
	out := new(UploadKycImgResponse)
	err := c.cc.Invoke(ctx, "/kyc.management.v1.KycManagement/UploadKycImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kycManagementClient) GetKycImg(ctx context.Context, in *GetKycImgRequest, opts ...grpc.CallOption) (*GetKycImgResponse, error) {
	out := new(GetKycImgResponse)
	err := c.cc.Invoke(ctx, "/kyc.management.v1.KycManagement/GetKycImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KycManagementServer is the server API for KycManagement service.
// All implementations must embed UnimplementedKycManagementServer
// for forward compatibility
type KycManagementServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	CreateKycRecord(context.Context, *CreateKycRecordRequest) (*CreateKycRecordResponse, error)
	GetKycInfo(context.Context, *GetKycInfoRequest) (*GetKycInfoResponse, error)
	// update kyc status
	UpdateKycStatus(context.Context, *UpdateKycStatusRequest) (*UpdateKycStatusResponse, error)
	UpdateKyc(context.Context, *UpdateKycRequest) (*UpdateKycResponse, error)
	UploadKycImg(context.Context, *UploadKycImgRequest) (*UploadKycImgResponse, error)
	GetKycImg(context.Context, *GetKycImgRequest) (*GetKycImgResponse, error)
	mustEmbedUnimplementedKycManagementServer()
}

// UnimplementedKycManagementServer must be embedded to have forward compatible implementations.
type UnimplementedKycManagementServer struct {
}

func (UnimplementedKycManagementServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedKycManagementServer) CreateKycRecord(context.Context, *CreateKycRecordRequest) (*CreateKycRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKycRecord not implemented")
}
func (UnimplementedKycManagementServer) GetKycInfo(context.Context, *GetKycInfoRequest) (*GetKycInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycInfo not implemented")
}
func (UnimplementedKycManagementServer) UpdateKycStatus(context.Context, *UpdateKycStatusRequest) (*UpdateKycStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKycStatus not implemented")
}
func (UnimplementedKycManagementServer) UpdateKyc(context.Context, *UpdateKycRequest) (*UpdateKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKyc not implemented")
}
func (UnimplementedKycManagementServer) UploadKycImg(context.Context, *UploadKycImgRequest) (*UploadKycImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadKycImg not implemented")
}
func (UnimplementedKycManagementServer) GetKycImg(context.Context, *GetKycImgRequest) (*GetKycImgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycImg not implemented")
}
func (UnimplementedKycManagementServer) mustEmbedUnimplementedKycManagementServer() {}

// UnsafeKycManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KycManagementServer will
// result in compilation errors.
type UnsafeKycManagementServer interface {
	mustEmbedUnimplementedKycManagementServer()
}

func RegisterKycManagementServer(s grpc.ServiceRegistrar, srv KycManagementServer) {
	s.RegisterService(&KycManagement_ServiceDesc, srv)
}

func _KycManagement_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycManagementServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyc.management.v1.KycManagement/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycManagementServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycManagement_CreateKycRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKycRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycManagementServer).CreateKycRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyc.management.v1.KycManagement/CreateKycRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycManagementServer).CreateKycRecord(ctx, req.(*CreateKycRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycManagement_GetKycInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycManagementServer).GetKycInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyc.management.v1.KycManagement/GetKycInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycManagementServer).GetKycInfo(ctx, req.(*GetKycInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycManagement_UpdateKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKycStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycManagementServer).UpdateKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyc.management.v1.KycManagement/UpdateKycStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycManagementServer).UpdateKycStatus(ctx, req.(*UpdateKycStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycManagement_UpdateKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycManagementServer).UpdateKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyc.management.v1.KycManagement/UpdateKyc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycManagementServer).UpdateKyc(ctx, req.(*UpdateKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycManagement_UploadKycImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadKycImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycManagementServer).UploadKycImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyc.management.v1.KycManagement/UploadKycImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycManagementServer).UploadKycImg(ctx, req.(*UploadKycImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KycManagement_GetKycImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KycManagementServer).GetKycImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyc.management.v1.KycManagement/GetKycImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KycManagementServer).GetKycImg(ctx, req.(*GetKycImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KycManagement_ServiceDesc is the grpc.ServiceDesc for KycManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KycManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kyc.management.v1.KycManagement",
	HandlerType: (*KycManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _KycManagement_Version_Handler,
		},
		{
			MethodName: "CreateKycRecord",
			Handler:    _KycManagement_CreateKycRecord_Handler,
		},
		{
			MethodName: "GetKycInfo",
			Handler:    _KycManagement_GetKycInfo_Handler,
		},
		{
			MethodName: "UpdateKycStatus",
			Handler:    _KycManagement_UpdateKycStatus_Handler,
		},
		{
			MethodName: "UpdateKyc",
			Handler:    _KycManagement_UpdateKyc_Handler,
		},
		{
			MethodName: "UploadKycImg",
			Handler:    _KycManagement_UploadKycImg_Handler,
		},
		{
			MethodName: "GetKycImg",
			Handler:    _KycManagement_GetKycImg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/kyc-management.proto",
}
